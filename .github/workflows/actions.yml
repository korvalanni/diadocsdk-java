on:
  push:
    paths-ignore:
      - "**/*.md"
env:
  JCP_VERSION: 2.0.40450-A
  JCP_FILENAME_PREFIX: jcp-
  DIADOC_SIGNING_SECRET: ${{ secrets.DIADOC_SIGNING_SECRET }}

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.14.0
        with:
          java-version: 17
          maven-version: 3.9.8


      - name: Decrypt and Extract JCP Archive
        run: |
          openssl enc -d -aes-256-cbc \
            -in ./${{ env.JCP_FILENAME_PREFIX }}${{ env.JCP_VERSION }}.zip.enc \
            -out ./${{ env.JCP_FILENAME_PREFIX }}${{ env.JCP_VERSION }}.zip \
            -pass env:DIADOC_SIGNING_SECRET

          unzip -o ./${{ env.JCP_FILENAME_PREFIX }}${{ env.JCP_VERSION }}.zip 

      - name: Install JCP Dependencies
        run: |
          jars=(
            "JCP.jar ru.cryptopro jcp"
            "asn1rt.jar com.objsys.asn1j asn1rt"
            "ASN1P.jar ru.cryptopro asn1p"
            "JCryptoP.jar ru.cryptopro jcryptop"
          )

          for jar in "${jars[@]}"; do
            set -- $jar
            mvn install:install-file \
              -Dfile=./${{ env.JCP_FILENAME_PREFIX }}${{ env.JCP_VERSION }}/$1 \
              -DgroupId=$2 \
              -DartifactId=$3 \
              -Dversion=${{ env.JCP_VERSION }} \
              -Dpackaging=jar
          done

      - name: Run the build script
        run: mvn package
        env:
          github_ref_type: ${{ github.ref_type }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: |
            target/*.jar
          if-no-files-found: error

      - name: Validate artifacts
        run: |
          chmod +x validate_version.sh
          ARTIFACT_DIR=target

          for jar in $ARTIFACT_DIR/*.jar; do
            FILE_NAME=$(basename "$jar")
            VERSION=$(echo "$FILE_NAME" | sed -n 's/^diadocsdk-\([0-9.]\+\(-[a-zA-Z0-9.]\+\)*\)\.jar$/\1/p')
            ./validate_version.sh "$VERSION"
          
          done

          echo "All artifacts passed validation."
 

  publish-auto:
    runs-on: ubuntu-22.04
    needs: build
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: packages

      - name: Extract JAR version
        id: extract-version
        run: |
          ARTIFACT_DIR="/home/runner/work/diadocsdk-java/diadocsdk-java"
          JAR_FILES=$(find "$ARTIFACT_DIR" -type f -name "*.jar")
          for jar in JAR_FILES; do
            FILE_NAME=$(basename "$jar")
            VERSION=$(echo "$FILE_NAME" | sed -n 's/^diadocsdk-\([0-9.]\+\(-[a-zA-Z0-9.]\+\)*\)\.jar$/\1/p')
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          done

      - name: Create Git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag versions/${{ env.VERSION }}
          git push origin versions/${{ env.VERSION }}

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          fail_on_unmatched_files: true
          draft: false
          prerelease: false
          files: |
            **/*.jar
          tag_name: versions/${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-manual:
    runs-on: ubuntu-22.04
    needs: build
    if: |
      startsWith(github.event.ref, 'refs/tags/version')
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Validate tag version
        run: |
          chmod +x validate_version.sh
          TAG="${{ github.ref }}"
          VERSION=$(echo "$TAG" | sed -n 's|.*/versions/\([0-9a-zA-Z.-]*\)|\1|p')
          echo "Extracted version: ${VERSION}"
          ./validate_version.sh "$VERSION"
          
          for jar in $ARTIFACT_DIR/*.jar; do
            FILE_NAME=$(basename "$jar")
            MANIFEST_VERSION=$(echo "$FILE_NAME" | sed -n 's/^diadocsdk-\([0-9.]\+\(-[a-zA-Z0-9.]\+\)*\)\.jar$/\1/p')
            if [ "$MANIFEST_VERSION" != "$VERSION" ]; then
              echo "Version mismatch! Jar version ($MANIFEST_VERSION) does not match tag version ($VERSION)"
              exit 1
            fi          
          done    

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: packages

      - name: Create github release
        uses: softprops/action-gh-release@v1
        with:
          fail_on_unmatched_files: true
          draft: false
          prerelease: false
          files: |
            **/*.jar